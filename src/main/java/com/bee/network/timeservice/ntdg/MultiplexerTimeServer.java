package com.bee.network.timeservice.ntdg;import java.io.IOException;import java.net.InetSocketAddress;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel;import java.time.LocalDateTime;import java.util.Iterator;import java.util.Set;/** * TODO:class description * * @author yangying * @version 1.0 * @since 2022/7/12 **/public class MultiplexerTimeServer implements Runnable {    private Selector selector;    private ServerSocketChannel servChannel;    private volatile boolean stop;    public MultiplexerTimeServer(int port) {        try {            selector = Selector.open();            servChannel = ServerSocketChannel.open();            servChannel.configureBlocking(false);            servChannel.bind(new InetSocketAddress(port), 1024);            servChannel.register(selector, SelectionKey.OP_ACCEPT);            System.out.println("the time server is start in port:" + port);        } catch (IOException e) {            e.printStackTrace();            System.exit(1);        }    }    @Override    public void run() {        while (!stop) {            try {                selector.select(1000);                Set<SelectionKey> selectionKeys = selector.selectedKeys();                Iterator<SelectionKey> it = selectionKeys.iterator();                SelectionKey key = null;                while (it.hasNext()) {                    key = it.next();                    it.remove();                    try {                        handlerInput(key);                    } catch (Exception e) {                        if (key != null) {                            key.channel();                            if (key.channel() != null) {                                key.channel().close();                            }                        }                    }                }            } catch (Throwable t) {                t.printStackTrace();            }        }        if (selector != null) {            try {                selector.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    private void handlerInput(SelectionKey key) throws IOException {        if (key.isValid()) {            if (key.isAcceptable()) {                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();                SocketChannel sc = ssc.accept();                sc.configureBlocking(false);                sc.register(selector, SelectionKey.OP_READ);            }            if (key.isReadable()) {                SocketChannel sc = (SocketChannel) key.channel();                ByteBuffer readBuffer = ByteBuffer.allocate(1024);                int readBytes = sc.read(readBuffer);                if (readBytes > 0) {                    readBuffer.flip();                    byte[] bytes = new byte[readBuffer.remaining()];                    readBuffer.get(bytes);                    System.out.println("the time server receive order:" + new String(bytes));                    String currentTime = LocalDateTime.now().toString();                    doWrite(sc, currentTime);                } else if (readBytes < 0) {                    key.cancel();                    sc.close();                }            }        }    }    private void doWrite(SocketChannel channel, String response) throws IOException {        if (response != null && response.trim().length() > 0) {            byte[] bytes = response.getBytes();            ByteBuffer writeBuffer = ByteBuffer.allocate(bytes.length);            writeBuffer.put(bytes);            writeBuffer.flip();            channel.write(writeBuffer);        }    }    public void stop(){        this.stop = true;    }}