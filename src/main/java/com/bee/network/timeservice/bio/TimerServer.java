package com.bee.network.timeservice.bio;import java.io.*;import java.net.Socket;import java.time.LocalDateTime;import java.time.LocalTime;/** * 一个基于tcp/ip协议的时间服务器，提供查询时间的服务。<br><br/> * 使用Socket套接字实现网络通讯，客户端与服务端之间的协议非常简单:客户端可以发送任何内容，服务端接受客户端请求内容，每读取一行，则获取一次当前时间，并返回给客户端 * * @author yangying * @version 1.0 * @since 2022/7/11 **/public class TimerServer implements Runnable {    private Socket socket;    public TimerServer(Socket socket) {        this.socket = socket;    }    @Override    public void run() {        InputStream in = null;        BufferedReader reader = null;        PrintWriter out = null;        try {            in = socket.getInputStream();            reader = new BufferedReader(new InputStreamReader(in));            out = new PrintWriter(socket.getOutputStream(),true);            LocalDateTime localTime = LocalDateTime.now();            String line;            while (true) {                System.out.println(Thread.currentThread().getName()+":begin read request:");                line = reader.readLine();                System.out.println(Thread.currentThread().getName()+":"+line);                if(line == null){//当client端关闭socket时，会读取到EOF，即无可读取的数据，null                    break;                }                StringBuilder sb = new StringBuilder();                sb.append("current time:").append(localTime).append("\r\n");                System.out.println("begin send response:");                out.println(sb);            }            System.out.println("server thread out");        } catch (IOException e) {            e.printStackTrace();            throw new RuntimeException(e);        }catch (Exception e){            e.printStackTrace();        }finally {            try {                if (in != null) {                    in.close();                }                if(reader!=null){                    reader.close();                }                if(out!=null){                    out.close();                }                if(socket !=null){                    socket.close();                }            } catch (IOException e) {                throw new RuntimeException(e);            }        }    }}