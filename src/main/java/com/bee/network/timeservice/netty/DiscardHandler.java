package com.bee.network.timeservice.netty;import io.netty.buffer.ByteBuf;import io.netty.buffer.Unpooled;import io.netty.channel.ChannelFuture;import io.netty.channel.ChannelFutureListener;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import java.nio.ByteBuffer;import java.time.LocalDateTime;/** * TODO:class description * * @author yangying * @version 1.0 * @since 2022/7/13 **//** * Handles a server-side channel. */public class DiscardHandler extends ChannelInboundHandlerAdapter {    private int counter;    /*@Override    public void channelActive(ChannelHandlerContext ctx){        byte[] bytes = LocalDateTime.now().toString().getBytes();        final ByteBuf time = ctx.alloc().buffer(bytes.length);        time.writeBytes(bytes);        final ChannelFuture f = ctx.writeAndFlush(time);        f.addListener(new ChannelFutureListener() {            @Override            public void operationComplete(ChannelFuture channelFuture) throws Exception {                assert f== channelFuture;                ctx.close();            }        });    }*/    @Override    public void channelRead(ChannelHandlerContext ctx,Object msg){        /*ByteBuf req = (ByteBuf)msg;        byte[] bytes = new byte[req.readableBytes()];        req.readBytes(bytes);*/        String body = (String)msg;        //String body = new String(bytes).substring(0,bytes.length-System.getProperty("line.separator").length());        System.out.println("receive req:"+body+";the counter is "+ ++counter);        byte[] response = null;        if(body.equals(Constant.REQ_ORDER)){            response = (LocalDateTime.now().toString()+System.getProperty("line.separator")).getBytes();        }else {            response = Constant.RESP_BAD_ORDER.getBytes();        }        ByteBuf responseBuf = Unpooled.copiedBuffer(response);        ctx.writeAndFlush(responseBuf);    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause){        // Close the connection when an exception is raised.        cause.printStackTrace();        ctx.close();    }}