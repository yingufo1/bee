package com.bee.algstruct.algorithms.backtracing.others;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;/** * 剑指 Offer II 086. 分割回文子字符串:https://leetcode.cn/problems/M99OJA/ * * @author yangying * @version 1.0 * @since 2022/6/1 **/public class Partition {    public String[][] partition(String s) {        List<List<String>> result = new ArrayList<>();        partition(s, new LinkedList<>(), 0, result);        String[][] res = new String[result.size()][];        int j = 0;        for (List<String> list : result) {            String[] array = new String[list.size()];            int i = 0;            for (String str : list) {                array[i] = str;                i++;            }            res[j] = array;            j++;        }        return res;    }    private void partition(String s, LinkedList<String> sub, int index, List<List<String>> result) {        if (index == s.length()) {            result.add(new ArrayList<>(sub));            return;        }        for (int i = index; i < s.length(); ++i) {            if (isPalindrome(s, index, i)) {                sub.add(s.substring(index, i + 1));                partition(s, sub, index + 1, result);                sub.removeLast();            }        }    }    private boolean isPalindrome(String s, int start, int end) {        while (start < end) {            if (s.charAt(start++) != s.charAt(end--)) {                return false;            }        }        return true;    }}