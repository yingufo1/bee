package com.bee.algstruct.datastruct.tree.trie;/** * 剑指 Offer II 064. 神奇的字典:https://leetcode.cn/problems/US1pGT/ * * @author yangying * @version 1.0 * @since 2022/5/29 **/public class MagicDictionary {    TrieNode root;    /**     * Initialize your data structure here.     */    public MagicDictionary() {        root = new TrieNode();    }    public void buildDict(String[] dictionary) {        for (String word : dictionary) {            TrieNode cur = root;            for (char c : word.toCharArray()) {                if (cur.children[c - 'a'] == null) {                    cur.children[c - 'a'] = new TrieNode();                }            }            cur.isWord = true;        }    }    public boolean search(String searchWord) {        return dfs(root, searchWord, 0, 0);    }    private boolean dfs(TrieNode root, String word, int i, int edit) {        if (root == null) {            return false;        }        if (root.isWord && i == word.length() && edit == 1) {            return true;        }        if (i < word.length() && edit <= 1) {            boolean found = false;            for (int j = 0; j < 26 && !found; j++) {                int next = j == word.charAt(i) - 'a' ? edit : edit + 1;                found = dfs(root.children[j], word, i + 1, next);            }            return found;        }        return false;    }}/** * Your MagicDictionary object will be instantiated and called as such: * MagicDictionary obj = new MagicDictionary(); * obj.buildDict(dictionary); * boolean param_2 = obj.search(searchWord); */