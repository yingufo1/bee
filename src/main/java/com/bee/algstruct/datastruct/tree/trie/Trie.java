package com.bee.algstruct.datastruct.tree.trie;/** * 前缀树 * 剑指 Offer II 062. 实现前缀树：https://leetcode.cn/problems/QC3q1f/ * * @author yangying * @version 1.0 * @since 2022/5/29 **/public class Trie {    private TrieNode root;    /**     * Initialize your data structure here.     */    public Trie() {        root = new TrieNode();    }    /**     * Inserts a word into the trie.     */    public void insert(String word) {        TrieNode cur = root;        for (char c : word.toCharArray()) {            if (cur.children[c - 'a'] == null) {                cur.children[c - 'a'] = new TrieNode();            }            cur = cur.children[c - 'a'];        }        cur.isWord = true;    }    /**     * Returns if the word is in the trie.     */    public boolean search(String word) {        TrieNode cur = startsWithOrIsWord(word);        return cur != null && cur.isWord;    }    /**     * Returns if there is any word in the trie that starts with the given prefix.     */    public boolean startsWith(String prefix) {        TrieNode cur = startsWithOrIsWord(prefix);        return cur != null;    }    /**     * return the most short prefix word of the given word     * @param word     * @return     */    public String prefixWord(String word){        TrieNode cur = root;        StringBuilder shortPrefix = new StringBuilder();        for (char c : word.toCharArray()) {            if(cur.isWord){                return shortPrefix.toString();            }            if (cur.children[c - 'a'] == null) {                return null;            }            shortPrefix.append(c);            cur = cur.children[c - 'a'];        }        return shortPrefix.toString();    }    private TrieNode startsWithOrIsWord(String prefix) {        TrieNode cur = root;        for (char c : prefix.toCharArray()) {            if (cur.children[c - 'a'] == null) {                return null;            }            cur = cur.children[c - 'a'];        }        return cur;    }    /**     * Your Trie object will be instantiated and called as such:     * Trie obj = new Trie();     * obj.insert(word);     * boolean param_2 = obj.search(word);     * boolean param_3 = obj.startsWith(prefix);     */}