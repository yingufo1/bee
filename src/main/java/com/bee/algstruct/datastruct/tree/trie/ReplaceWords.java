package com.bee.algstruct.datastruct.tree.trie;import java.util.List;/** * 剑指 Offer II 063. 替换单词:https://leetcode.cn/problems/UhWRSj/ * * @author yangying * @version 1.0 * @since 2022/5/29 **/public class ReplaceWords {    public String replaceWords(List<String> dictionary, String sentence) {        Trie trie = new Trie();        for (String root : dictionary) {            trie.insert(root);        }        StringBuilder ans = new StringBuilder();        for (String word : sentence.split(" ")) {            String replaceWord = trie.prefixWord(word);            if(replaceWord == null){                replaceWord = word;            }            ans.append(replaceWord).append(" ");        }        return ans.toString().substring(0, ans.length() - 1);    }    class Trie {        private TrieNode root;        /**         * Initialize your data structure here.         */        public Trie() {            root = new TrieNode();        }        /**         * Inserts a word into the trie.         */        public void insert(String word) {            TrieNode cur = root;            for (char c : word.toCharArray()) {                if (cur.children[c - 'a'] == null) {                    cur.children[c - 'a'] = new TrieNode();                }                cur = cur.children[c - 'a'];            }            cur.isWord = true;        }        /**         * return the most short prefix word of the given word         *         * @param word         * @return         */        public String prefixWord(String word) {            TrieNode cur = root;            StringBuilder shortPrefix = new StringBuilder();            for (char c : word.toCharArray()) {                if (cur.isWord) {                    return shortPrefix.toString();                }                if (cur.children[c - 'a'] == null) {                    return null;                }                shortPrefix.append(c);                cur = cur.children[c - 'a'];            }            return shortPrefix.toString();        }    }}