package com.bee.algorithms.dynamicprogramming.doubleseq;import java.util.Arrays;/** * 剑指 Offer II 098. 路径的数目:https://leetcode.cn/problems/2AoeFn/ * * @author yangying * @version 1.0 * @since 2022/6/5 **/public class UniquePaths {    public int uniquePaths(int m, int n) {        if(n == 1){            return 1;        }        int[][] dp = new int[m][n];        dp[m - 1][n - 1] = 0;        for (int i = m - 1; i >= 0; i--) {            for (int j = n - 1; j >= 0; j--) {                uniquePaths(i, j, dp);            }        }        for (int[] a : dp) {            System.out.println(Arrays.toString(a));        }        return dp[0][0];    }    private void uniquePaths(int i, int j, int[][] dp) {        if (i == dp.length - 1 && j == dp[0].length - 1) {            dp[i][j] = 0;            return;        }        if (i == dp.length - 1) {            dp[i][j] = 1;        } else if (j == dp[0].length - 1) {            dp[i][j] = 1;        } else {            dp[i][j] = dp[i + 1][j] + dp[i][j + 1] ;        }    }    public static void main(String[] args) {        UniquePaths uniquePaths = new UniquePaths();        int ans = uniquePaths.uniquePaths(3, 7);        System.out.println(ans);    }}