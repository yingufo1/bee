package com.bee.algorithms.dynamicprogramming.singleseq;import java.util.HashMap;import java.util.Map;/** * 剑指 Offer II 093. 最长斐波那契数列:https://leetcode.cn/problems/Q91FMA/ * * @author yangying * @version 1.0 * @since 2022/6/3 **/public class LenLongestFibSubseq {    /**     * 输入: arr = [1,2,3,4,5,6,7,8]     * 输出: 5     * 解释: 最长的斐波那契式子序列为 [1,2,3,5,8] 。     * <p>     * 输入: arr = [1,3,7,11,12,14,18]     * 输出: 3     * 解释: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。     *     * @param arr     * @return     */    public int lenLongestFibSubseq(int[] arr) {        Map<Integer, Integer> map = new HashMap<>();        int[][] dp = new int[arr.length][arr.length];        for (int i = 0; i < arr.length; i++) {            map.put(arr[i], i);        }        int result = 2;        for (int i = 1; i < arr.length; i++) {            for (int j = 0; j < i; j++) {                int k = map.getOrDefault(arr[i] - arr[j], -1);                dp[i][j] = k >= 0 && k < j ? dp[j][k] + 1 : 2;                result = Math.max(result, dp[i][j]);            }        }        return result > 2 ? result : 0;    }}