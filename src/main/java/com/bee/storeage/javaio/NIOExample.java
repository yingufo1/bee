package com.bee.storeage.javaio;import java.io.*;import java.nio.ByteBuffer;import java.nio.IntBuffer;import java.nio.MappedByteBuffer;import java.nio.channels.FileChannel;/** * java nio的用法样例 * * @author yangying * @version 1.0 * @since 2022/7/6 **/public class NIOExample {    public void UseNIOByStrandSteam()   {        try {            FileChannel fileChannel = new FileOutputStream("example.txt").getChannel();            fileChannel.write(ByteBuffer.wrap("append something".getBytes()));            fileChannel.close();            fileChannel = new FileInputStream("example.txt").getChannel();            ByteBuffer byteBuffer = ByteBuffer.allocate(1024);            fileChannel.read(byteBuffer);            byteBuffer.flip();//翻转，在write或者get之前调用            StringBuilder sb = new StringBuilder();            while (byteBuffer.hasRemaining()) {                sb.append((char) byteBuffer.get());//读取当前position位置的字节，position自增            }            fileChannel.close();            System.out.println(sb);        } catch (IOException e) {            throw new RuntimeException(e);        }    }    public void copyFile(String src,String target){        try {            FileChannel in = new FileInputStream(src).getChannel();            FileChannel out = new FileOutputStream(target).getChannel();            // 方法一：从一个Channel读，写入另外一个Channel            /*ByteBuffer buf = ByteBuffer.allocate(1024);            while(in.read(buf)!=-1){                buf.flip();                out.write(buf);                buf.clear();            }*/            //方法二：利用transferTo            in.transferTo(0,in.size(),out);            //OR  out.transferFrom(in,0,in.size());            in.close();            out.close();        } catch (IOException e) {            throw new RuntimeException(e);        }    }    //使用buffer-view来操作bytebuffer，以方便操作原始类型    public void usePrimitiveType(){        ByteBuffer buffer = ByteBuffer.allocate(1024);        IntBuffer intb = buffer.asIntBuffer();        intb.put(new int[]{11,2,3,1,22,1});        intb.put(3,1024);        intb.flip();        StringBuilder sb = new StringBuilder();        while(intb.hasRemaining()){            sb.append(intb.get());        }        System.out.println(sb);    }    /**     * 使用内存映射     */    public void mmap(){        long start = System.currentTimeMillis();        final int _1kb = 1024;        int length = _1kb*1024*1024;//1G        //length = length*3;        try {            FileChannel fc =  new RandomAccessFile("example.txt","rw").getChannel();            MappedByteBuffer mbb = fc.map(FileChannel.MapMode.READ_WRITE,0,length);            for(int i=0;i<length;i++){                mbb.put((byte)(0x01^i));            }            System.out.println("Finished writing");            //mmap以后不需要调用write(),由操作系统刷新脏页            /*for(int i=0;i<length;i+=_4kb){                mbb.flip();                fc.write(mbb);            }*/           // ((DirectBuffer)mbb).cleaner().clear();            //fc.force(true);            fc.close();        } catch (IOException e) {            throw new RuntimeException(e);        }        long end = System.currentTimeMillis();        System.out.println("cost:"+(end - start));    }    public static void main(String[] args) {        NIOExample nioExample = new NIOExample();        //nioExample.UseNIOByStrandSteam();        //nioExample.copyFile("example.txt","example_copy.txt");        //nioExample.usePrimitiveType();        nioExample.mmap();    }}