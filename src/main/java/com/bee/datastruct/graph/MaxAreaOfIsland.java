package com.bee.datastruct.graph;import java.util.ArrayDeque;import java.util.Queue;/** * 剑指 Offer II 105. 岛屿的最大面积:https://leetcode.cn/problems/ZL6zAn/ * * @author yangying * @version 1.0 * @since 2022/6/8 **/public class MaxAreaOfIsland {    public int maxAreaOfIsland(int[][] grid) {        int row = grid.length;        int col = grid[0].length;        boolean[][] visited = new boolean[row][col];        int ans = 0;        for (int i = 0; i < row; i++) {            for (int j = 0; j < col; j++) {                if(!visited[i][j] && grid[i][j] == 1) {                    int area = getArea(grid, i, j, visited);                    ans = Math.max(area, ans);                }            }        }        return ans;    }    private int getArea(int[][] grid, int i, int j, boolean[][] visited) {        Queue<int[]> queue = new ArrayDeque<>();        int area = 0;        int[][] dirs = new int[][]{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};        queue.offer(new int[]{i,j});        visited[i][j]=true;        while (!queue.isEmpty()) {            area++;            int[] point = queue.remove();            for (int[] dir : dirs) {                int row = dir[0] + point[0];                int col = dir[1] + point[1];                if (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length && !visited[row][col] && grid[row][col] == 1) {                    queue.offer(new int[]{row,col});                    visited[row][col] = true;                }            }        }        return area;    }}